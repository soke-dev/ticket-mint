"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[39624],{39624:function(t,e,n){n.d(e,{getActiveClaimCondition:function(){return s}});var a=n(94293);let i=[],r=[{name:"startTimestamp",type:"uint256",internalType:"uint256"},{name:"maxClaimableSupply",type:"uint256",internalType:"uint256"},{name:"supplyClaimed",type:"uint256",internalType:"uint256"},{name:"quantityLimitPerWallet",type:"uint256",internalType:"uint256"},{name:"merkleRoot",type:"bytes32",internalType:"bytes32"},{name:"pricePerToken",type:"uint256",internalType:"uint256"},{name:"currency",type:"address",internalType:"address"},{name:"metadata",type:"string",internalType:"string"}];async function u(t){return(0,a.readContract)({contract:t.contract,method:["0xd637ed59",i,r],params:[]})}let l=[],p=[{type:"uint256"}];async function m(t){return(0,a.readContract)({contract:t.contract,method:["0xc68907de",l,p],params:[]})}let y=[{type:"uint256",name:"_conditionId"}],c=[{type:"tuple",name:"condition",components:[{type:"uint256",name:"startTimestamp"},{type:"uint256",name:"maxClaimableSupply"},{type:"uint256",name:"supplyClaimed"},{type:"uint256",name:"quantityLimitPerWallet"},{type:"bytes32",name:"merkleRoot"},{type:"uint256",name:"pricePerToken"},{type:"address",name:"currency"},{type:"string",name:"metadata"}]}];async function o(t){return(0,a.readContract)({contract:t.contract,method:["0x6f8934f4",y,c],params:[t.conditionId]})}async function s(t){let e=async()=>{let e=await m(t);return o({...t,conditionId:e})},n=async()=>{let[e,n,a,i,r,l,p,m]=await u(t);return{startTimestamp:e,maxClaimableSupply:n,supplyClaimed:a,quantityLimitPerWallet:i,merkleRoot:r,pricePerToken:l,currency:p,metadata:m}},a=(await Promise.allSettled([e(),n()])).find(t=>"fulfilled"===t.status);if((null==a?void 0:a.status)==="fulfilled")return a.value;throw Error("Claim condition not found")}}}]);