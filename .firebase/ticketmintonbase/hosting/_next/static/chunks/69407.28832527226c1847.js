"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[69407],{69407:function(t,e,n){n.d(e,{getActiveClaimCondition:function(){return d}});var a=n(94293);let i=[{name:"_tokenId",type:"uint256",internalType:"uint256"}],r=[{name:"startTimestamp",type:"uint256",internalType:"uint256"},{name:"maxClaimableSupply",type:"uint256",internalType:"uint256"},{name:"supplyClaimed",type:"uint256",internalType:"uint256"},{name:"quantityLimitPerWallet",type:"uint256",internalType:"uint256"},{name:"merkleRoot",type:"bytes32",internalType:"bytes32"},{name:"pricePerToken",type:"uint256",internalType:"uint256"},{name:"currency",type:"address",internalType:"address"},{name:"metadata",type:"string",internalType:"string"}];async function u(t){return(0,a.readContract)({contract:t.contract,method:["0xe9703d25",i,r],params:[t.tokenId]})}let p=[{type:"uint256",name:"_tokenId"}],o=[{type:"uint256"}];async function l(t){return(0,a.readContract)({contract:t.contract,method:["0x5ab063e8",p,o],params:[t.tokenId]})}let y=[{type:"uint256",name:"_tokenId"},{type:"uint256",name:"_conditionId"}],m=[{type:"tuple",name:"condition",components:[{type:"uint256",name:"startTimestamp"},{type:"uint256",name:"maxClaimableSupply"},{type:"uint256",name:"supplyClaimed"},{type:"uint256",name:"quantityLimitPerWallet"},{type:"bytes32",name:"merkleRoot"},{type:"uint256",name:"pricePerToken"},{type:"address",name:"currency"},{type:"string",name:"metadata"}]}];async function c(t){return(0,a.readContract)({contract:t.contract,method:["0xd45b28d7",y,m],params:[t.tokenId,t.conditionId]})}async function d(t){let e=async()=>{let e=await l(t);return c({...t,conditionId:e})},n=async()=>{let[e,n,a,i,r,p,o,l]=await u({...t,tokenId:t.tokenId});return{startTimestamp:e,maxClaimableSupply:n,supplyClaimed:a,quantityLimitPerWallet:i,merkleRoot:r,pricePerToken:p,currency:o,metadata:l}},a=(await Promise.allSettled([e(),n()])).find(t=>"fulfilled"===t.status);if((null==a?void 0:a.status)==="fulfilled")return a.value;throw Error("Claim condition not found")}}}]);